<?php include("_header.php"); ?>
    <title><?= $model['contest']['title'] ?> &bull; Reverse</title>
  </head>

  <body class="with-navbar">
    <?php include("_navbar.php"); ?>
    <div class="jumbotron">
      <div class="container">
        <h1>Reverse engineering example</h1>
      </div>
    </div>
    <div class="container main">
      <div class="row">
        <div class=" col-md-10">
        <h2>Предисловие</h2>
<p>Любая компьютерная программа в конечном счете должна быть представлена в виде инструкций для процессора (т.н. opcodes – операционных кодов). Причем если это язык такой, как C или Pascal, то исходный код программы компилируется сразу в бинарный код – набор инструкций в двоичном (бинарном) виде – который и хранится в виде файла; а если язык интерпретируемый, как Python, Bash или Ruby, то исходный код хранится в текстовом виде и выполняется специальной программой (интерпретатором) по тексту. При этом есть и смешанные варианты – такие технологии как, например, Java или .NET предлагают исходный код на каком-то языке программирования транслировать в некоторой специальный код, не являющийся машинным, и затем выполнять уже этот код специальной программой (виртуальной машиной).</p>
<p>Нас сегодня интересует программы, скомпилированные в бинарные файлы. Чаще всего в этих файлах не остается информация в текстовом виде о названиях функций и переменных, поэтому нам придется работать с абстрактными адресами в памяти.</p>
<p>Для начала немного теории. Упрощая, можно сказать, что программа храниться в файле в виде процессорных инструкций и при запуске записывается в оперативную память, затем на этот набор инструкций передается управление. В процессоре есть особые именованные ячейки памяти, которые используются в процессе выполнения программы как необходимый контекст для выполнения команд. Среди них есть такие как: ip (instruction pointer) – регистр, в котором хранится адрес следующей инструкции, sp (stack pointer) – регистр, в котором хранится адрес вершины стека (про него будет написано ниже), ax, bx, cx, dx и другие – регистры данных, используемые для промежуточных вычислений и так далее. Список регистров и больше информации про них можно найти в нижеуказанном руководстве, либо <a href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80_%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%D0%B0" target="_blank">в других источниках энциклопедического характера</a>. Важно отметить. что регистры бывают разного размера, для этого используются специальные приставки: ip - ячейка памяти размером 2 байта, eip - 4 байта, rip - 8 байт, для большинства остальных по аналогии.</p>
<p>Ассемблер – язык программирования, в котором команды ассоциированы с процессорными инструкциями, таким образом, одна команда – одна процессорная инструкция. Полный список инструкций для процессоров семейства Intel и другую информацию на эту тему можно посмотреть в книге <a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" target="_blank">“Intel Software Developer Manual”</a>. При этом программы разделены на функции (процедуры), каждая функция – набор инструкций, при этом эти инструкции тоже должны быть расположены где-то в памяти, поэтому у каждой функции есть адрес начала.</p>
<p>Также существует такое понятие, как стек – структура, которая присутствует у каждой программы, которая умеет осуществлять две команды – push и pop – соответственно положить на вершину стека (туда, куда указывает esp, при этом сам указатель смещается)  и взять с вершины стека. При этом все локальные переменные в функции хранятся на стеке, и каждый раз при заходе в функцию из вершины стека вычитается суммарный размер переменных, так как стек растет вниз – когда мы делаем push, из esp вычитается соответственное количество байт. Обращение к этим переменным идет через регистр ebp (base pointer), в котором хранится адрес основания стека для данной функции, то есть значение esp, если бы мы не выделяли память под переменные.</p>
<h2>Инструменты</h2>
<p>Для reverse engineering’а нам понадобятся следующие инструменты:</p>
<ol>
<li>Дизассемблер для просмотра ассемблерного кода программы, например <a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml" target="_blank">IDA (Interactive Disassembler)</a></li>
<li>Hex-editor, например <a href="http://mh-nexus.de/en/downloads.php?product=HxD" target="_blank">HxD</a></li>
</ol>
<p>Также в процессе reverse engineering’а могут потребоваться такие вещи как обозреватель ресурсов (например PE Explorer) или дебаггер  (например OllyDbg), но сегодня нам они не нужны.</p>
<p>Рассмотрим наши инструменты чуть более подробно.</p>
<h2>Interactive Disassembler (IDA)</h2>
<p>Открыть файл можно с помощью опции в меню File -&gt; Open… (Ctrl+O). При этом в большинстве случаем все остальное определиться автоматически и требуется лишь подтвердить выбор.</p>
<p><a href="/static/ida/screen2.jpg" target="_blank"><img alt="" src="/static/ida/screen2.jpg" width="600"></a></p>
<p>Когда мы открываем исполняемый файл, IDA автоматически генерирует соответствующий код на ассемблере, составляя списки функций, анализирует деревья их вызовов и выдает результат в удобном для нас виде. Для переключения между линейным листингом и представлением в виде графа необходимо нажать пробел.</p>
<p><a href="/static/ida/screen3.jpg" target="_blank"><img alt="" src="/static/ida/screen3.jpg" width="600"></a></p>
<p>Мы можем перейти на определение функции или участка памяти, просто дважды нажав на них, при этом сохраняется позиция. Перемещаться по сохраненным позициям можно либо с помощью панели инструментов, либо с помощью сочетаний клавиш Esc (назад) и Ctrl-Esc (вперед).</p>
<p><a href="/static/ida/screen4.jpg" target="_blank"><img alt="" src="/static/ida/screen4.jpg" width="600"></a></p>
<p>Смещение текущей инструкции относительно начала программы указано в шестнадцатеричном виде в строке состояния. Сначала указано смещение в файле, потом смещение в памяти.</p>
<p><a href="/static/ida/screen5.jpg" target="_blank"><img alt="" src="/static/ida/screen5.jpg" width="600"></a></p>
<p>При закрытии, если мы не хотим сохранять текущую сессию работы в IDA, необходимо указать опцию Don’t Save The Database</p>
<p><a href="/static/ida/screen6.jpg" target="_blank"><img alt="" src="/static/ida/screen6.jpg" width="600"></a></p>
<h2>HxD</h2>
<p>Открывать файлы можно с помощью File -&gt; Open… (Ctrl+O) или Drag’n’Drop. Для сохранения файла использовать File -&gt; Save (Ctrl+S). Слева указано смещение относительно начала файла в шестнадцатеричном виде. Изменять можно либо шестнадцатеричное значение, либо символьное представление данных.</p>
<p><a href="/static/ida/screen7.jpg" target="_blank"><img alt="" src="/static/ida/screen7.jpg" width="600"></a></p>
      </div>
    
        </div>
      </div>
<?php include("_footer.php"); ?>
